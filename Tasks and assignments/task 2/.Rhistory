exp_1_mse = summary(exp_1_aov)$"Error: Within"$"Mean Sq"[2]
exp_1_df = summary(exp_1_aov)$"Error: Within"$"Df"[2]
cat("The mean squared error is:\n\t", exp_1_mse, "\nThe degrees of freedom are:\n\t", exp_1_df)
exp_1_mse = summary(exp_1_aov)$"Error: Within"[[1]]$"Mean Sq"[2]
exp_1_df = summary(exp_1_aov)$"Error: Within"[[1]]$"Df"[2]
cat("The mean squared error is:\n\t", exp_1_mse, "\nThe degrees of freedom are:\n\t", exp_1_df)
exp_1_mse = summary(exp_1_aov)$"Error: Within"[[1]]$"Mean Sq"[2]
exp_1_df = summary(exp_1_aov)$"Error: Within"[[1]]$"Df"[1]
cat("The mean squared error is:\n\t", exp_1_mse, "\nThe degrees of freedom are:\n\t", exp_1_df)
??qt()
??qt
?qt
observe_per_grp = length(exp_1_long$Yield) / length(unique(exp_1_long$fertilizer))
# at 95% CF
exp_1_t = qt(0.95, exp_1_df)
# lsd
exp_1_lsd = exp_1_t * sqrt(2 * exp_1_mse/ observe_per_grp)
exp_1_lsd
shapiro.test(residuals(exp_1_aov))
setwd("C:/Users/ADMIN/Documents/SEM 2 2024/STA4020 Design and Analysis of Experiments/Tasks and assignments/task 2")
residuals(exp_1_aov)
exp_1_aov$Field$residuals
exp_1_aov$Within$residuals
shapiro.test(exp_1_aov$Within$residuals)
# using the error within data
# testing normal distribution
shapiro.test(exp_1_aov$Within$residuals)
leveneTest(Yield~fertilizer, data = exp_1_long)
install.packages("car")
library(car)
leveneTest(Yield~fertilizer, data = exp_1_long)
exp_1_pairwise_differences = with(exp_1_long, tapply(Yield, fertilizer, mean))
exp_1_comparisons = expand.grid(names(exp_1_pairwise_differences), names(exp_1_pairwise_differences))
exp_1_comparisons$difference = abs(exp_1_pairwise_differences[exp_1_comparisons$Var1] - exp_1_pairwise_differences[exp_1_comparisons$Var2])
exp_1_comparisons$significant = exp_1_comparisons$difference > exp_1_lsd
exp_1_comparisons
exp_1_comparisons = exp_1_comparisons[order(exp_1_comparisons$difference), decreasing = T]
exp_1_comparisons = exp_1_comparisons[order(exp_1_comparisons$difference, decreasing = T)]
exp_1_comparisons_dec = exp_1_comparisons[order(exp_1_comparisons$difference, decreasing = T)]
exp_1_comparisons_dec = exp_1_comparisons[order(exp_1_comparisons$difference, decreasing = T),]
exp_1_comparisons_dec
miss_data = data.frame(soil = seq(1, 5),
plant_a = c(15, NA, 16, 14, 18),
plant_b = c(17, 18, 19, 16, 20),
plant_c = c(20, 22, 23, NA, 24),
plant_d = c(NA, 21, 20, 19, 22))
miss_data
rowMeans(miss_data)
rowMeans(miss_data, na.rm = T)
miss_data[2, 2] = (rowMeans(miss_data, na.rm = T)[2]+ colMeans(miss_data, na.rm =T)[2])/2
miss_data
miss_data = data.frame(soil = seq(1, 5),
plant_a = c(15, NA, 16, 14, 18),
plant_b = c(17, 18, 19, 16, 20),
plant_c = c(20, 22, 23, NA, 24),
plant_d = c(NA, 21, 20, 19, 22))
miss_data
miss_data[2, 2] = (rowMeans(miss_data[2:nrow(miss_data), ], na.rm = T)[2]+ colMeans(miss_data, na.rm =T)[2])/2
miss_data
miss_data = data.frame(soil = seq(1, 5),
plant_a = c(15, NA, 16, 14, 18),
plant_b = c(17, 18, 19, 16, 20),
plant_c = c(20, 22, 23, NA, 24),
plant_d = c(NA, 21, 20, 19, 22))
miss_data
miss_data[2, 2] = (sum(miss_data[2:nrow(miss_data), ], na.rm = T)/ (nrow(miss_data) -1)+ sum(miss_data, na.rm =T)/ (ncol(miss_data)-1))/2
miss_data
miss_data[2, 2] = (sum(miss_data[2, ], na.rm = T)/ (nrow(miss_data) -1)+ sum(miss_data[, 2], na.rm =T)/ (ncol(miss_data)-1))/2
miss_data
miss_data = data.frame(soil = seq(1, 5),
plant_a = c(15, NA, 16, 14, 18),
plant_b = c(17, 18, 19, 16, 20),
plant_c = c(20, 22, 23, NA, 24),
plant_d = c(NA, 21, 20, 19, 22))
miss_data
miss_data[2, 2] = (sum(miss_data[2, ], na.rm = T)/ (nrow(miss_data) -1)+ sum(miss_data[, 2], na.rm =T)/ (ncol(miss_data)-1))/2
miss_data
row_sum_1 = sum(miss_data[2,], na.rm = T)
row_sum_1 = sum(miss_data[2,], na.rm = T)/4
col_sum_1 = sum(miss_data[,2], na.rm = T)/3
knitr::opts_chunk$set(echo = TRUE)
exp_1 = data.frame(field = seq(1, 4),
fertilizer_a = c(20, 25, 18, 22),
fertilizer_b = c(18, 24, 17, 21),
fertilizer_c = c(15, 20, 14, 19),
fertilizer_d = c(22, 23, 20, 24))
exp_1
library(tidyr)
exp_1_long = pivot_longer(exp_1, c(2, 3, 4, 5),
names_to = "fertilizer",
values_to = "Yield",
names_prefix = "fertilizer_")
exp_1_long$fertilizer = toupper(gsub("fertilizer_", "", exp_1_long$fertilizer))
exp_1_long$field = factor(exp_1_long$field)
names(exp_1_long)[1] = "Field"
exp_1_long
exp_1_aov = aov(Yield~fertilizer + Error(Field),
data = exp_1_long)
summary(exp_1_aov)
check_p_val = function(pval, sig_level){
if(pval < sig_level){
cat("At a significance level of:\n", sig_level,"\nwe reject H_0.\n\tConclude:\n\t\tthere atleast one mean yield from fertilizer treatment that is statistically and significantly different from the other yields")
}else{
cat("At a significance level of:\n", sig_level,"\nwe fail to reject H_0.\n\tConclude:\n\t\tno statistically significant mean yield from fertilizer treatment")
}
}
str(summary(exp_1_aov))
str(summary(exp_1_aov)$"Error: Within")
summary(exp_1_aov)$"Error: Within"[[1]]$"Pr(>F"
exp_1_pval = summary(exp_1_aov)$"Error: Within"[[1]]$"Pr(>F"[1]
exp_1_pval
check_p_val(exp_1_pval, 0.05)
exp_1_mse = summary(exp_1_aov)$"Error: Within"[[1]]$"Mean Sq"[2]
exp_1_df = summary(exp_1_aov)$"Error: Within"[[1]]$"Df"[1]
cat("The mean squared error is:\n\t", exp_1_mse, "\nThe degrees of freedom are:\n\t", exp_1_df)
observe_per_grp = length(exp_1_long$Yield) / length(unique(exp_1_long$fertilizer))
# at 95% CF
exp_1_t = qt(0.95, exp_1_df)
# lsd
exp_1_lsd = exp_1_t * sqrt(2 * exp_1_mse/ observe_per_grp)
exp_1_lsd
# using the error within data
# testing normal distribution
shapiro.test(exp_1_aov$Within$residuals)
library(car)
leveneTest(Yield~fertilizer, data = exp_1_long)
exp_1_pairwise_differences = with(exp_1_long, tapply(Yield, fertilizer, mean))
exp_1_comparisons = expand.grid(names(exp_1_pairwise_differences), names(exp_1_pairwise_differences))
exp_1_comparisons$difference = abs(exp_1_pairwise_differences[exp_1_comparisons$Var1] - exp_1_pairwise_differences[exp_1_comparisons$Var2])
exp_1_comparisons$significant = exp_1_comparisons$difference > exp_1_lsd
exp_1_comparisons
exp_1_comparisons_dec = exp_1_comparisons[order(exp_1_comparisons$difference, decreasing = T),]
exp_1_comparisons_dec
miss_data = data.frame(soil = seq(1, 5),
plant_a = c(15, NA, 16, 14, 18),
plant_b = c(17, 18, 19, 16, 20),
plant_c = c(20, 22, 23, NA, 24),
plant_d = c(NA, 21, 20, 19, 22))
miss_data
row_sum_1 = sum(miss_data[2,], na.rm = T)/4
col_sum_1 = sum(miss_data[,2], na.rm = T)/3
miss_data[2, 2] = (row_sum_1 + col_sum_1)/2
miss_data
row_sum_1 = sum(miss_data[2,3:ncol(miss_data)], na.rm = T)/4
col_sum_1 = sum(miss_data[c(1, 3, 4, 5),2], na.rm = T)/3
miss_data[2, 2] = (row_sum_1 + col_sum_1)/2
miss_data
row_sum_1 = sum(miss_data[2,c(3, 4, 5)], na.rm = T)/4
col_sum_1 = sum(miss_data[c(1, 3, 4, 5),2], na.rm = T)/3
miss_data[2, 2] = (row_sum_1 + col_sum_1)/2
miss_data
row_sum_1 = sum(miss_data[2,c(3, 4, 5)], na.rm = T)/4
row_sum_1 = sum(miss_data[2,c(3, 4, 5)], na.rm = T)/3
col_sum_1 = sum(miss_data[c(1, 3, 4, 5),2], na.rm = T)/4
miss_data[2, 2] = (row_sum_1 + col_sum_1)/2
miss_data
miss_data[, 6] = cbind(NA,colSums(miss_data[,2:ncol(miss_data)]))
cbind(NA,colSums(miss_data[,2:ncol(miss_data)]))
rbind(NA,colSums(miss_data[,2:ncol(miss_data)]))
miss_data[, 6] = c(NA,colSums(miss_data[,2:ncol(miss_data)]))
miss_data
c(NA,colSums(miss_data[,2:ncol(miss_data)]))
row_sum_1 = sum(miss_data[2,c(3, 4, 5)], na.rm = T)/3
col_sum_1 = sum(miss_data[c(1, 3, 4, 5),2], na.rm = T)/4
miss_data[2, 2] = (row_sum_1 + col_sum_1)/2
miss_data
miss_data = data.frame(soil = seq(1, 5),
plant_a = c(15, NA, 16, 14, 18),
plant_b = c(17, 18, 19, 16, 20),
plant_c = c(20, 22, 23, NA, 24),
plant_d = c(NA, 21, 20, 19, 22))
miss_data
row_sum_1 = sum(miss_data[2,c(3, 4, 5)], na.rm = T)/3
col_sum_1 = sum(miss_data[c(1, 3, 4, 5),2], na.rm = T)/4
miss_data[2, 2] = (row_sum_1 + col_sum_1)/2
miss_data
miss_data[6,] = c(NA,colSums(miss_data[,2:ncol(miss_data)]))
miss_data$row_sum = c(NA,rowSums(miss_data[,2:ncol(miss_data)]))
miss_data[6,] = c(NA,colSums(miss_data[,2:ncol(miss_data)]))
miss_data$row_sum = rowSums(miss_data[,2:ncol(miss_data)])
miss_data
View(miss_data)
miss_data = data.frame(soil = seq(1, 5),
plant_a = c(15, NA, 16, 14, 18),
plant_b = c(17, 18, 19, 16, 20),
plant_c = c(20, 22, 23, NA, 24),
plant_d = c(NA, 21, 20, 19, 22))
miss_data
row_sum_1 = sum(miss_data[2,c(3, 4, 5)], na.rm = T)/3
col_sum_1 = sum(miss_data[c(1, 3, 4, 5),2], na.rm = T)/4
miss_data[2, 2] = (row_sum_1 + col_sum_1)/2
miss_data
miss_data[6,] = c(NA,colSums(miss_data[,2:ncol(miss_data)]))
miss_data$row_sum = rowSums(miss_data[,2:ncol(miss_data)], na.rm = T)
miss_data
miss_data = data.frame(soil = seq(1, 5),
plant_a = c(15, NA, 16, 14, 18),
plant_b = c(17, 18, 19, 16, 20),
plant_c = c(20, 22, 23, NA, 24),
plant_d = c(NA, 21, 20, 19, 22))
miss_data
row_sum_1 = sum(miss_data[2,c(3, 4, 5)], na.rm = T)/3
col_sum_1 = sum(miss_data[c(1, 3, 4, 5),2], na.rm = T)/4
miss_data[2, 2] = (row_sum_1 + col_sum_1)/2
miss_data
miss_data[6,] = c(NA,colSums(miss_data[,2:ncol(miss_data)]), na.rm = T)
miss_data$row_sum = rowSums(miss_data[,2:ncol(miss_data)], na.rm = T)
miss_data
miss_data = data.frame(soil = seq(1, 5),
plant_a = c(15, NA, 16, 14, 18),
plant_b = c(17, 18, 19, 16, 20),
plant_c = c(20, 22, 23, NA, 24),
plant_d = c(NA, 21, 20, 19, 22))
miss_data
row_sum_1 = sum(miss_data[2,c(3, 4, 5)], na.rm = T)/3
col_sum_1 = sum(miss_data[c(1, 3, 4, 5),2], na.rm = T)/4
miss_data[2, 2] = (row_sum_1 + col_sum_1)/2
miss_data
miss_data[6,] = c(NA,colSums(miss_data[,2:ncol(miss_data)], na.rm = T))
miss_data$row_sum = rowSums(miss_data[,2:ncol(miss_data)], na.rm = T)
miss_data
is.na(miss_data)
which(is.na(miss_data), arr.ind = T)
which(is.na(miss_data), arr.ind = T)
miss_data[4, 4] = ((5 * miss_data[4, 6]) + (4 * miss_data[6, 4]) + miss_data(6,6))/((5 - 1) * (4 -1))
miss_data[4, 4] = ((5 * miss_data[4, 6]) + (4 * miss_data[6, 4]) + miss_data[6,6])/((5 - 1) * (4 -1))
miss_data[6,] = c(NA,colSums(miss_data[,2:ncol(miss_data)], na.rm = T))
miss_data$row_sum = rowSums(miss_data[,2:ncol(miss_data)], na.rm = T)
miss_data
knitr::opts_chunk$set(echo = TRUE)
exp_1 = data.frame(field = seq(1, 4),
fertilizer_a = c(20, 25, 18, 22),
fertilizer_b = c(18, 24, 17, 21),
fertilizer_c = c(15, 20, 14, 19),
fertilizer_d = c(22, 23, 20, 24))
exp_1
library(tidyr)
exp_1_long = pivot_longer(exp_1, c(2, 3, 4, 5),
names_to = "fertilizer",
values_to = "Yield",
names_prefix = "fertilizer_")
exp_1_long$fertilizer = toupper(gsub("fertilizer_", "", exp_1_long$fertilizer))
exp_1_long$field = factor(exp_1_long$field)
names(exp_1_long)[1] = "Field"
exp_1_long
exp_1_aov = aov(Yield~fertilizer + Error(Field),
data = exp_1_long)
summary(exp_1_aov)
check_p_val = function(pval, sig_level){
if(pval < sig_level){
cat("At a significance level of:\n", sig_level,"\nwe reject H_0.\n\tConclude:\n\t\tthere atleast one mean yield from fertilizer treatment that is statistically and significantly different from the other yields")
}else{
cat("At a significance level of:\n", sig_level,"\nwe fail to reject H_0.\n\tConclude:\n\t\tno statistically significant mean yield from fertilizer treatment")
}
}
str(summary(exp_1_aov))
str(summary(exp_1_aov)$"Error: Within")
summary(exp_1_aov)$"Error: Within"[[1]]$"Pr(>F"
exp_1_pval = summary(exp_1_aov)$"Error: Within"[[1]]$"Pr(>F"[1]
exp_1_pval
check_p_val(exp_1_pval, 0.05)
exp_1_mse = summary(exp_1_aov)$"Error: Within"[[1]]$"Mean Sq"[2]
exp_1_df = summary(exp_1_aov)$"Error: Within"[[1]]$"Df"[1]
cat("The mean squared error is:\n\t", exp_1_mse, "\nThe degrees of freedom are:\n\t", exp_1_df)
observe_per_grp = length(exp_1_long$Yield) / length(unique(exp_1_long$fertilizer))
# at 95% CF
exp_1_t = qt(0.95, exp_1_df)
# lsd
exp_1_lsd = exp_1_t * sqrt(2 * exp_1_mse/ observe_per_grp)
exp_1_lsd
# using the error within data
# testing normal distribution
shapiro.test(exp_1_aov$Within$residuals)
library(car)
leveneTest(Yield~fertilizer, data = exp_1_long)
exp_1_pairwise_differences = with(exp_1_long, tapply(Yield, fertilizer, mean))
exp_1_comparisons = expand.grid(names(exp_1_pairwise_differences), names(exp_1_pairwise_differences))
exp_1_comparisons$difference = abs(exp_1_pairwise_differences[exp_1_comparisons$Var1] - exp_1_pairwise_differences[exp_1_comparisons$Var2])
exp_1_comparisons$significant = exp_1_comparisons$difference > exp_1_lsd
exp_1_comparisons
exp_1_comparisons_dec = exp_1_comparisons[order(exp_1_comparisons$difference, decreasing = T),]
exp_1_comparisons_dec
miss_data = data.frame(soil = seq(1, 5),
plant_a = c(15, NA, 16, 14, 18),
plant_b = c(17, 18, 19, 16, 20),
plant_c = c(20, 22, 23, NA, 24),
plant_d = c(NA, 21, 20, 19, 22))
miss_data
row_sum_1 = sum(miss_data[2,c(3, 4, 5)], na.rm = T)/3
col_sum_1 = sum(miss_data[c(1, 3, 4, 5),2], na.rm = T)/4
miss_data[2, 2] = (row_sum_1 + col_sum_1)/2
miss_data
miss_data[6,] = c(NA,colSums(miss_data[,2:ncol(miss_data)], na.rm = T))
miss_data$row_sum = rowSums(miss_data[,2:ncol(miss_data)], na.rm = T)
miss_data
which(is.na(miss_data), arr.ind = T)
add_val = function(row, col){
miss_data[row, col] = ((5 * miss_data[row, 6]) + (4 * miss_data[6, col]) + miss_data[6,6])/((5 - 1) * (4 -1))
miss_data[6,] = c(NA,colSums(miss_data[,2:ncol(miss_data)], na.rm = T))
miss_data$row_sum = rowSums(miss_data[,2:ncol(miss_data)], na.rm = T)
}
add_val(4, 4)
miss_data
knitr::opts_chunk$set(echo = TRUE)
exp_1 = data.frame(field = seq(1, 4),
fertilizer_a = c(20, 25, 18, 22),
fertilizer_b = c(18, 24, 17, 21),
fertilizer_c = c(15, 20, 14, 19),
fertilizer_d = c(22, 23, 20, 24))
exp_1
library(tidyr)
exp_1_long = pivot_longer(exp_1, c(2, 3, 4, 5),
names_to = "fertilizer",
values_to = "Yield",
names_prefix = "fertilizer_")
exp_1_long$fertilizer = toupper(gsub("fertilizer_", "", exp_1_long$fertilizer))
exp_1_long$field = factor(exp_1_long$field)
names(exp_1_long)[1] = "Field"
exp_1_long
exp_1_aov = aov(Yield~fertilizer + Error(Field),
data = exp_1_long)
summary(exp_1_aov)
check_p_val = function(pval, sig_level){
if(pval < sig_level){
cat("At a significance level of:\n", sig_level,"\nwe reject H_0.\n\tConclude:\n\t\tthere atleast one mean yield from fertilizer treatment that is statistically and significantly different from the other yields")
}else{
cat("At a significance level of:\n", sig_level,"\nwe fail to reject H_0.\n\tConclude:\n\t\tno statistically significant mean yield from fertilizer treatment")
}
}
str(summary(exp_1_aov))
str(summary(exp_1_aov)$"Error: Within")
summary(exp_1_aov)$"Error: Within"[[1]]$"Pr(>F"
exp_1_pval = summary(exp_1_aov)$"Error: Within"[[1]]$"Pr(>F"[1]
exp_1_pval
check_p_val(exp_1_pval, 0.05)
exp_1_mse = summary(exp_1_aov)$"Error: Within"[[1]]$"Mean Sq"[2]
exp_1_df = summary(exp_1_aov)$"Error: Within"[[1]]$"Df"[1]
cat("The mean squared error is:\n\t", exp_1_mse, "\nThe degrees of freedom are:\n\t", exp_1_df)
observe_per_grp = length(exp_1_long$Yield) / length(unique(exp_1_long$fertilizer))
# at 95% CF
exp_1_t = qt(0.95, exp_1_df)
# lsd
exp_1_lsd = exp_1_t * sqrt(2 * exp_1_mse/ observe_per_grp)
exp_1_lsd
# using the error within data
# testing normal distribution
shapiro.test(exp_1_aov$Within$residuals)
library(car)
leveneTest(Yield~fertilizer, data = exp_1_long)
exp_1_pairwise_differences = with(exp_1_long, tapply(Yield, fertilizer, mean))
exp_1_comparisons = expand.grid(names(exp_1_pairwise_differences), names(exp_1_pairwise_differences))
exp_1_comparisons$difference = abs(exp_1_pairwise_differences[exp_1_comparisons$Var1] - exp_1_pairwise_differences[exp_1_comparisons$Var2])
exp_1_comparisons$significant = exp_1_comparisons$difference > exp_1_lsd
exp_1_comparisons
exp_1_comparisons_dec = exp_1_comparisons[order(exp_1_comparisons$difference, decreasing = T),]
exp_1_comparisons_dec
miss_data = data.frame(soil = seq(1, 5),
plant_a = c(15, NA, 16, 14, 18),
plant_b = c(17, 18, 19, 16, 20),
plant_c = c(20, 22, 23, NA, 24),
plant_d = c(NA, 21, 20, 19, 22))
miss_data
row_sum_1 = sum(miss_data[2,c(3, 4, 5)], na.rm = T)/3
col_sum_1 = sum(miss_data[c(1, 3, 4, 5),2], na.rm = T)/4
miss_data[2, 2] = (row_sum_1 + col_sum_1)/2
miss_data
miss_data[6,] = c(NA,colSums(miss_data[,2:ncol(miss_data)], na.rm = T))
miss_data$row_sum = rowSums(miss_data[,2:ncol(miss_data)], na.rm = T)
miss_data
which(is.na(miss_data), arr.ind = T)
add_val = function(row, col){
val = ((5 * miss_data[row, 6]) + (4 * miss_data[6, col]) + miss_data[6,6])/((5 - 1) * (4 -1))
return(val)
}
miss_data[4, 4] = add_val(4, 4)
miss_data[6,] = c(NA,colSums(miss_data[,2:ncol(miss_data)], na.rm = T))
miss_data$row_sum = rowSums(miss_data[,2:ncol(miss_data)], na.rm = T)
miss_data[1, 5] = add_val(1, 5)
miss_data[6,] = c(NA,colSums(miss_data[,2:ncol(miss_data)], na.rm = T))
miss_data$row_sum = rowSums(miss_data[,2:ncol(miss_data)], na.rm = T)
miss_data
knitr::opts_chunk$set(echo = TRUE)
exp_1 = data.frame(field = seq(1, 4),
fertilizer_a = c(20, 25, 18, 22),
fertilizer_b = c(18, 24, 17, 21),
fertilizer_c = c(15, 20, 14, 19),
fertilizer_d = c(22, 23, 20, 24))
exp_1
library(tidyr)
exp_1_long = pivot_longer(exp_1, c(2, 3, 4, 5),
names_to = "fertilizer",
values_to = "Yield",
names_prefix = "fertilizer_")
exp_1_long$fertilizer = toupper(gsub("fertilizer_", "", exp_1_long$fertilizer))
exp_1_long$field = factor(exp_1_long$field)
names(exp_1_long)[1] = "Field"
exp_1_long
exp_1_aov = aov(Yield~fertilizer + Error(Field),
data = exp_1_long)
summary(exp_1_aov)
check_p_val = function(pval, sig_level){
if(pval < sig_level){
cat("At a significance level of:\n", sig_level,"\nwe reject H_0.\n\tConclude:\n\t\tthere atleast one mean yield from fertilizer treatment that is statistically and significantly different from the other yields")
}else{
cat("At a significance level of:\n", sig_level,"\nwe fail to reject H_0.\n\tConclude:\n\t\tno statistically significant mean yield from fertilizer treatment")
}
}
str(summary(exp_1_aov))
str(summary(exp_1_aov)$"Error: Within")
summary(exp_1_aov)$"Error: Within"[[1]]$"Pr(>F"
exp_1_pval = summary(exp_1_aov)$"Error: Within"[[1]]$"Pr(>F"[1]
exp_1_pval
check_p_val(exp_1_pval, 0.05)
exp_1_mse = summary(exp_1_aov)$"Error: Within"[[1]]$"Mean Sq"[2]
exp_1_df = summary(exp_1_aov)$"Error: Within"[[1]]$"Df"[1]
cat("The mean squared error is:\n\t", exp_1_mse, "\nThe degrees of freedom are:\n\t", exp_1_df)
observe_per_grp = length(exp_1_long$Yield) / length(unique(exp_1_long$fertilizer))
# at 95% CF
exp_1_t = qt(0.95, exp_1_df)
# lsd
exp_1_lsd = exp_1_t * sqrt(2 * exp_1_mse/ observe_per_grp)
exp_1_lsd
# using the error within data
# testing normal distribution
shapiro.test(exp_1_aov$Within$residuals)
library(car)
leveneTest(Yield~fertilizer, data = exp_1_long)
exp_1_pairwise_differences = with(exp_1_long, tapply(Yield, fertilizer, mean))
exp_1_comparisons = expand.grid(names(exp_1_pairwise_differences), names(exp_1_pairwise_differences))
exp_1_comparisons$difference = abs(exp_1_pairwise_differences[exp_1_comparisons$Var1] - exp_1_pairwise_differences[exp_1_comparisons$Var2])
exp_1_comparisons$significant = exp_1_comparisons$difference > exp_1_lsd
exp_1_comparisons
exp_1_comparisons_dec = exp_1_comparisons[order(exp_1_comparisons$difference, decreasing = T),]
exp_1_comparisons_dec
miss_data = data.frame(soil = seq(1, 5),
plant_a = c(15, NA, 16, 14, 18),
plant_b = c(17, 18, 19, 16, 20),
plant_c = c(20, 22, 23, NA, 24),
plant_d = c(NA, 21, 20, 19, 22))
miss_data
row_sum_1 = sum(miss_data[2,c(3, 4, 5)], na.rm = T)/3
col_sum_1 = sum(miss_data[c(1, 3, 4, 5),2], na.rm = T)/4
miss_data[2, 2] = (row_sum_1 + col_sum_1)/2
miss_data
miss_data[6,] = c(NA,colSums(miss_data[,2:ncol(miss_data)], na.rm = T))
miss_data$row_sum = rowSums(miss_data[,2:ncol(miss_data)], na.rm = T)
miss_data
which(is.na(miss_data), arr.ind = T)
add_val = function(row, col){
val = ((5 * miss_data[row, 6]) + (4 * miss_data[6, col]) - miss_data[6,6])/((5 - 1) * (4 -1))
return(val)
}
miss_data[4, 4] = add_val(4, 4)
miss_data[6,] = c(NA,colSums(miss_data[,2:ncol(miss_data)], na.rm = T))
miss_data$row_sum = rowSums(miss_data[,2:ncol(miss_data)], na.rm = T)
miss_data[1, 5] = add_val(1, 5)
miss_data[6,] = c(NA,colSums(miss_data[,2:ncol(miss_data)], na.rm = T))
miss_data$row_sum = rowSums(miss_data[,2:ncol(miss_data)], na.rm = T)
miss_data
exp_2_data = miss_data[1:5, 1:4]
exp_2_data
exp_2_data = miss_data[1:5, 1:5]
exp_2_data
exp_2_long = pivot_longer(exp_2_data, c(2, 3, 4, 5),
names_to = "variety",
values_to = "yield",
names_prefix = "plant_")
exp_2_long$variety = toupper(gsub("plant_", "", exp_2_long$variety))
exp_2_long$soil = factor(exp_1_long$soil)
exp_2_long = pivot_longer(exp_2_data, c(2, 3, 4, 5),
names_to = "variety",
values_to = "yield",
names_prefix = "plant_")
exp_2_long$variety = toupper(gsub("plant_", "", exp_2_long$variety))
exp_2_long$soil = factor(exp_2_long$soil)
names(exp_2_long)[1] = "soil"
exp_2_long
exp_2_aov = aov(yield~variety + Error(soil), data = exp_2_long)
summary(exp_2_aov)
check_p_val(summary(exp_2_aov)$"Error: Within"[[1]]$"Pr(>F"[1], 0.05)
shapiro.test(exp_2_aov$Within$residuals)
leveneTest(yield~variety, data = exp_2_long)
exp_2_pairwise_differences = with(exp_2_long, tapply(Yield, fertilizer, mean))
exp_2_pairwise_differences = with(exp_2_long, tapply(yield, variety, mean))
exp_2_comparisons = expand.grid(names(exp_2_pairwise_differences), names(exp_2_pairwise_differences))
exp_2_comparisons$difference = abs(exp_2_pairwise_differences[exp_2_comparisons$Var1] - exp_2_pairwise_differences[exp_2_comparisons$Var2])
exp_2_comparisons$significant = exp_2_comparisons$difference > exp_2_lsd
exp_2_mse = summary(exp_2_aov)$"Error: Within"[[1]]$"Mean Sq"[2]
exp_2_df = summary(exp_2_aov)$"Error: Within"[[1]]$"Df"[1]
observe_per_grp_2 = length(exp_2_long$Yield) / length(unique(exp_2_long$variety))
# at 95% CF
exp_2_t = qt(0.95, exp_2_df)
# lsd
exp_2_lsd = exp_2_t * sqrt(2 * exp_2_mse/ observe_per_grp)
exp_2_lsd
exp_2_mse = summary(exp_2_aov)$"Error: Within"[[1]]$"Mean Sq"[2]
exp_2_df = summary(exp_2_aov)$"Error: Within"[[1]]$"Df"[1]
observe_per_grp_2 = length(exp_2_long$yield) / length(unique(exp_2_long$variety))
# at 95% CF
exp_2_t = qt(0.95, exp_2_df)
# lsd
exp_2_lsd = exp_2_t * sqrt(2 * exp_2_mse/ observe_per_grp)
exp_2_lsd
exp_2_pairwise_differences = with(exp_2_long, tapply(yield, variety, mean))
exp_2_comparisons = expand.grid(names(exp_2_pairwise_differences), names(exp_2_pairwise_differences))
exp_2_comparisons$difference = abs(exp_2_pairwise_differences[exp_2_comparisons$Var1] - exp_2_pairwise_differences[exp_2_comparisons$Var2])
exp_2_comparisons$significant = exp_2_comparisons$difference > exp_2_lsd
exp_2_comparisons
exp_2_comparisons_dec = exp_2_comparisons[order(exp_2_comparisons$difference, decreasing = T),]
exp_2_comparisons_dec
exp
exp
