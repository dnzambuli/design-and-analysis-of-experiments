MS = 1:5
)
stddev_fertilizer = 9.855506
stddev_replicates = 11.84131
residual_stddev = 18.10572
#  variances
var_fertilizer = stddev_fertilizer^2
var_replicates = stddev_replicates^2
var_residual = residual_stddev^2
# expected mean square
EMS_Rep = var_residual + var_replicates
EMS_A = var_residual + var_fertilizer
EMS_B = var_residual
EMS_AB = var_residual
EMS_Error = var_residual
anova_sum = anova(irrigation_model)
residual_err = sigma(irrigation_model)
class_style_table = data.frame(
Source = c("Rep","Fertilizer", "Irrigation", "Fertilizer:Irrigation", "Error"),
Expected_MS = c(
sprintf("%.2f + ab * %.2f", var_residual, var_replicates),
sprintf("%.2f + r * %.2f + r*b / (a - 1) * Sum(αi²)", var_residual, var_fertilizer),
sprintf("%.2f + r*a * %.2f", var_residual, var_replicates),
sprintf("%.2f + r*σ²_AB", var_residual),
sprintf("%.2f", var_residual)
),
MS = 1:5
)
class_style_table
anova_sum = anova(irrigation_model)
residual_err = sigma(irrigation_model)
class_style_table = data.frame(
Source = c("Rep","Fertilizer", "Irrigation", "Fertilizer:Irrigation", "Error"),
Expected_MS = c(
EMS_Rep,
EMS_A,
EMS_B,
EMS_AB,
EMS_Error
),
MS = 1:5,
F.test = c(EMS_Rep/EMS_Error,
EMS_A/ EMS_AB,
EMS_B/EMS_Error,
EMS_AB/EMS_Error,
NA)
)
class_style_table
irrigation_model$varFix
irrigation_model$apVar
cor(agri_df)
set.seed(225)
rand_no = rnorm(48, mean = 0, sd = 1)
# using the range of 55 - 159 from the ( United States Department of Agriculture (USDA), 2024)
agri_df$Yields = with(agri_df, 55 + (rand_no - min(rand_no)) * (159 - 55) / (max(rand_no) - min(rand_no)) +
as.numeric(fertilizer) * 5 + as.numeric(irrigation) * 3)
head(agri_df)
table(agri_df$fertilizer, agri_df$irrigation, agri_df$replicates)
library(nlme)
irrigation_model = lme(Yields ~ fertilizer* irrigation, random = ~ 1 | fertilizer/replicates,
data = agri_df)
irrigation_table = anova(irrigation_model)
library(nlme)
irrigation_model = lme(Yields ~ fertilizer* irrigation, random = ~ 1 | replicates,
data = agri_df)
irrigation_table = anova(irrigation_model)
irrigation_table
View(agri_df)
variance_components = VarCorr(irrigation_model)
variance_components
with(des_data, response +
temperature_effect[Temperature] +
humidity_effect[Humidity] +
light_exposure_effect[Light_exposure])
des_data = data.frame (
Temperature = rep(rep(c("low(T)", "high(T)"), each = 4), 8),
Humidity = rep(rep(c("low(H)", "high(H)"), times = 4), 8),
Light_exposure = rep(rep(c("low(L)", "high(L)"), times = 2, each = 2), 8),
Treatment = rep(as.factor(seq(1,8)), 8),
Replicates = as.factor(rep(seq(1, 8), each = 8)),
Response = response
)
des_data$Response = with(des_data, Response +
temperature_effect[Temperature] +
humidity_effect[Humidity] +
light_exposure_effect[Light_exposure])
temperature_effect <- c("low(T)" = -30, "high(T)" = 60)
humidity_effect <- c("low(H)" = 18, "high(H)" = 90)
light_exposure_effect <- c("low(L)" = 254 , "high(L)" = 365)
des_data = data.frame (
Temperature = rep(rep(c("low(T)", "high(T)"), each = 4), 8),
Humidity = rep(rep(c("low(H)", "high(H)"), times = 4), 8),
Light_exposure = rep(rep(c("low(L)", "high(L)"), times = 2, each = 2), 8),
Treatment = rep(as.factor(seq(1,8)), 8),
Replicates = as.factor(rep(seq(1, 8), each = 8)),
Response = response
)
des_data$Response = with(des_data, Response +
temperature_effect[Temperature] +
humidity_effect[Humidity] +
light_exposure_effect[Light_exposure])
des_data = des_data %>%
mutate(Temperature = as.factor(Temperature)) %>%
mutate(Humidity = as.factor(Humidity)) %>%
mutate(Light_exposure = as.factor(Light_exposure))
head(des_data)
table(des_data$Humidity, des_data$Light_exposure, des_data$Replicate)
anova_table = aov(Response~Temperature*Humidity*Light_exposure, data = des_data)
summary(anova_table)
library(agricolae)
temp_lsd = LSD.test(anova_table, "Humidity")$groups
temp_lsd
library(agricolae)
temp_lsd = LSD.test(anova_table, c("Humidity", "Temperature", "Light_exposure"))$groups
temp_lsd
interaction.plot(
des_data$Humidity, des_data$Light_exposure, des_data$Response,
xlab = "Humidity", ylab = "Mean Response", trace.label = "Light Exposure",
col = c("red", "blue"), lwd = 2
)
interaction.plot(
des_data$Humidity, des_data$Temperature, des_data$Response,
xlab = "Humidity", ylab = "Mean Response", trace.label = "Light Exposure",
col = c("red", "blue"), lwd = 2
)
interaction.plot(
des_data$Temperature, des_data$Light_exposure, des_data$Response,
xlab = "Humidity", ylab = "Mean Response", trace.label = "Light Exposure",
col = c("red", "blue"), lwd = 2
)
interaction.plot(
des_data$Humidity, des_data$Temperature, des_data$Response,
xlab = "Humidity", ylab = "Mean Response", trace.label = "Temperature",
col = c("red", "blue"), lwd = 2
)
interaction.plot(
des_data$Temperature, des_data$Light_exposure, des_data$Response,
xlab = "Temperature", ylab = "Mean Response", trace.label = "Light Exposure",
col = c("red", "blue"), lwd = 2
)
data_1 = des_data[, c(1, 2, 3, 5)]
data_1 = des_data[, c(1, 2, 3, 5)]
data_1$interactions = interaction(data_1$Humidity, data_1$Light_exposure, data_1$Temperature)
head(data_1)
data_1 = des_data[, c(1, 2, 3, 4)]
data_1$interactions = interaction(data_1$Humidity, data_1$Light_exposure, data_1$Temperature)
head(data_1)
data_1 = des_data[, c(1, 2, 3, 6)]
data_1$interactions = interaction(data_1$Humidity, data_1$Light_exposure, data_1$Temperature)
head(data_1)
ggplot(data_1, aes(x=interactions, y=Response, fill=Humidity)) +
geom_boxplot() +
theme_minimal() +
labs(title="Boxplot of Response by Interactions", x="Humidity", y="Response")
ggplot(data_1, aes(x=interactions, y=Response, fill=Humidity)) +
geom_boxplot() +
theme_minimal() +
labs(title="Boxplot of Response by Interactions", x="Humidity", y="Response")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data_1, aes(x=interactions, y=Response, fill=Light_exposure)) +
geom_boxplot() +
theme_minimal() +
labs(title="Boxplot of Response by Interactions", x="Light_exposure", y="Response")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
install.packages("gridExtra")
fill_light = ggplot(data_1, aes(x=interactions, y=Response, fill=Light_exposure)) +
geom_boxplot() +
theme_minimal() +
labs(title="Boxplot of Response by Interactions", x="Light_exposure", y="Response")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
fill_temp = ggplot(data_1, aes(x=interactions, y=Response, fill=Temperature)) +
geom_boxplot() +
theme_minimal() +
labs(title="Boxplot of Response by Interactions", x="Light_exposure", y="Response")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
fill_humidity = ggplot(data_1, aes(x=interactions, y=Response, fill=Humidity)) +
geom_boxplot() +
theme_minimal() +
labs(title="Boxplot of Response by Interactions", x="Light_exposure", y="Response")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(gridExtra)
grid.arrange(fill_light, fill_temp, fill_humidity, ncol = 3)
library(gridExtra)
grid.arrange(fill_light, fill_temp, fill_humidity, nrow = 3, ncol = 1)
fill_light = ggplot(data_1, aes(x=interactions, y=Response, fill=Light_exposure)) +
geom_boxplot() +
theme_minimal() +
labs(title="Boxplot of Response by Interactions", x="Light_exposure", y="Response")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
fill_temp = ggplot(data_1, aes(x=interactions, y=Response, fill=Temperature)) +
geom_boxplot() +
theme_minimal() +
labs(title="Boxplot of Response by Interactions", x="Temperature", y="Response")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
fill_humidity = ggplot(data_1, aes(x=interactions, y=Response, fill=Humidity)) +
geom_boxplot() +
theme_minimal() +
labs(title="Boxplot of Response by Interactions", x="Humidity", y="Response")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(gridExtra)
grid.arrange(fill_light, fill_temp, fill_humidity, nrow = 3, ncol = 1)
calculate_ss <- function(data) {
# Calculate the total sum of squares
total <- sum(data)
cf <- total^2 / length(data)
total_ss <- sum((data)^2) - cf
# Calculate the sum of squares for replicates, fertilizers, etc.
rep_ss <- sum(colSums(apply(data, c(1, 2), function(x) sum(x)^2))) / (2*3) - cf
fert_ss <- sum(colSums(apply(data, c(2), function(x) sum(x)^2))) / (4*3) - cf
error_a_ss <- sum(colSums(apply(data, 2, function(x) sum(x)^2))) / 3 - cf - rep_ss - fert_ss
irr_ss <- sum(colSums(apply(data, c(1), function(x) sum(x)^2))) / (4*2) - cf
fert_irr_ss <- sum(colSums(apply(data, 1, function(x) sum(x)^2))) / 4 - cf
error_b_ss <- total_ss - rep_ss - fert_ss - error_a_ss - irr_ss - fert_irr_ss
# Return all calculated SS values
return(c(total_ss, rep_ss, fert_ss, error_a_ss, irr_ss, fert_irr_ss, error_b_ss))
}
data = matrix(agri_df$Yields, nrow(agri_df), ncol(agri_df))
ss_values <- calculate_ss(data)
data
# Update the function to ensure the output from apply is always a matrix
calculate_ss <- function(data) {
total <- sum(data)
cf <- total^2 / length(data)
total_ss <- sum((data)^2) - cf
# Ensuring matrix output by checking dimensions
safe_apply <- function(data, margin, FUN) {
result <- apply(data, margin, FUN)
if (!is.matrix(result)) {  # If result is not a matrix, convert it
result <- matrix(result, nrow = 1)
}
return(result)
}
rep_ss <- sum(colSums(safe_apply(data, c(1, 2), function(x) sum(x)^2))) / (2*3) - cf
fert_ss <- sum(colSums(safe_apply(data, c(2), function(x) sum(x)^2))) / (4*3) - cf
error_a_ss <- sum(colSums(safe_apply(data, 2, function(x) sum(x)^2))) / 3 - cf - rep_ss - fert_ss
irr_ss <- sum(colSums(safe_apply(data, c(1), function(x) sum(x)^2))) / (4*2) - cf
fert_irr_ss <- sum(colSums(safe_apply(data, 1, function(x) sum(x)^2))) / 4 - cf
error_b_ss <- total_ss - rep_ss - fert_ss - error_a_ss - irr_ss - fert_irr_ss
return(c(total_ss, rep_ss, fert_ss, error_a_ss, irr_ss, fert_irr_ss, error_b_ss))
}
# Assuming data is a matrix
data <- matrix(agri_df$Yields, nrow = nrow(agri_df), ncol = ncol(agri_df))
ss_values <- calculate_ss(data)
ss_values
names(ss_values) <- c("total_ss", "rep_ss", "fert_ss", "error_a_ss", "irr_ss", "fert_irr_ss", "error_b_ss")
ss_values
df_rep = as.numeric(unique(agri_df$replicates)) -1
df_fertilizer = 1
df_irrigation = 2
df_fer_irr = df_fertilizer * df_irrigation
df_error = as.numeric(unique(agri_df$treatments)) - 1
df_error_fer = df_rep * df_fertilizer
df_error_irr = df_rep * df_fertilizer * df_irrigation
ms_fertilizer = ss_values["fert_ss"]/ df_fertilizer
ms_error_fert = ss_values["error_a_ss"]/ df_error_fer
ms_irrigation = ss_values["irr_ss"]/ df_irrigation
ms_irr_fer =  ss_values["fert_irr_ss"]/ df_fer_irr
ms_error_irr = ss_values["error_b_ss"]/ df_irrigation
f_fertilizer = ms_fertilizer/ms_error_fert
f_irrigation = ms_irrigation/ms_error_irr
f_irr_fer = ms_irr_fer/ms_error_irr
p_fert = pf(f_fertilizer, df_fertilizer, df_error_fer, lower.tail = FALSE)
p_irr = pf(f_irrigation, df_irrigation, df_error_irr, lower.tail = FALSE)
p_irr_fer = pf(f_irr_fer, df_fer_irr, df_error_irr, lower.tail = FALSE)
data.frame(
source = c('Replicate', 'Fertilizer', 'Error (a)', 'Irrigation', 'Fertilizer x Irrigation', 'Error (b)', 'Total'),
df = c(df_rep, df_fertilizer, df_error_fer, df_irrigation, df_fer_irr, df_fertilizer, df_error),
ss = c(ss_values["rep_ss"], ss_values["fert_ss"], ss_values["error_a_ss"], ss_values["irr_ss"], ss_values["fert_irr_ss"],ss_values["error_b_ss"], ss_values["total_ss"] ),
ms = c(NA, ms_fertilizer, ms_error_fert, ms_error_fert, ms_irrigation, ms_irr_fer, ms_error_fert, NA),
F.stat = c(NA, f_fertilizer, NA, f_irrigation, f_irr_fer,NA, NA ),
p.value = c(NA, p_fert, NA, p_irr, p_irr_fer,NA, NA )
)
data.frame(
source = c('Replicate', 'Fertilizer', 'Error (a)', 'Irrigation', 'Fertilizer x Irrigation', 'Error (b)', 'Total'),
df = c(df_rep, df_fertilizer, df_error_fer, df_irrigation, df_fer_irr, df_fertilizer, df_error),
ss = c(ss_values["rep_ss"], ss_values["fert_ss"], ss_values["error_a_ss"], ss_values["irr_ss"], ss_values["fert_irr_ss"],ss_values["error_b_ss"], ss_values["total_ss"] ),
ms = c(NA, ms_fertilizer, ms_error_fert, ms_irrigation, ms_irr_fer, ms_error_fert, NA),
F.stat = c(NA, f_fertilizer, NA, f_irrigation, f_irr_fer,NA, NA ),
p.value = c(NA, p_fert, NA, p_irr, p_irr_fer,NA, NA )
)
source = c('Replicate', 'Fertilizer', 'Error (a)', 'Irrigation', 'Fertilizer x Irrigation', 'Error (b)', 'Total'),
source = c('Replicate', 'Fertilizer', 'Error (a)', 'Irrigation', 'Fertilizer x Irrigation', 'Error (b)', 'Total')
df = c(df_rep, df_fertilizer, df_error_fer, df_irrigation, df_fer_irr, df_fertilizer, df_error)
ss = c(ss_values["rep_ss"], ss_values["fert_ss"], ss_values["error_a_ss"], ss_values["irr_ss"] ss_values["fert_irr_ss"],ss_values["error_b_ss"], ss_values["total_ss"] )
ano_table <- data.frame(
Source = c('Replicate', 'Fertilizer', 'Error (a)', 'Irrigation', 'Fertilizer x Irrigation', 'Error (b)', 'Total'),
DF = c(df_rep, df_fertilizer, df_error_fer, df_irrigation, df_fer_irr, df_error, sum(c(df_rep, df_fertilizer, df_error_fer, df_irrigation, df_fer_irr, df_error))),  # Assuming df_error is the total error df
SS = c(ss_values["rep_ss"], ss_values["fert_ss"], ss_values["error_a_ss"], ss_values["irr_ss"], ss_values["fert_irr_ss"], ss_values["error_b_ss"], sum(ss_values[c("rep_ss", "fert_ss", "error_a_ss", "irr_ss", "fert_irr_ss", "error_b_ss")])),
MS = c(NA, ms_fertilizer, ms_error_fert, ms_irrigation, ms_irr_fer, ms_error_fert, NA),  # Assuming ms_error_fert is reused for error (a) and (b)
FStat = c(NA, f_fertilizer, NA, f_irrigation, f_irr_fer, NA, NA),
PValue = c(NA, p_fert, NA, p_irr, p_irr_fer, NA, NA)
)
ano_table <- data.frame(
Source = c('Replicate', 'Fertilizer', 'Error(a)', 'Irrigation', 'FertilizerxIrrigation', 'Error(b)', 'Total'),
DF = c(df_rep, df_fertilizer, df_error_fer, df_irrigation, df_fer_irr, df_error, sum(c(df_rep, df_fertilizer, df_error_fer, df_irrigation, df_fer_irr, df_error))),  # Assuming df_error is the total error df
SS = c(ss_values["rep_ss"], ss_values["fert_ss"], ss_values["error_a_ss"], ss_values["irr_ss"], ss_values["fert_irr_ss"], ss_values["error_b_ss"], sum(ss_values[c("rep_ss", "fert_ss", "error_a_ss", "irr_ss", "fert_irr_ss", "error_b_ss")])),
MS = c(NA, ms_fertilizer, ms_error_fert, ms_irrigation, ms_irr_fer, ms_error_fert, NA),  # Assuming ms_error_fert is reused for error (a) and (b)
FStat = c(NA, f_fertilizer, NA, f_irrigation, f_irr_fer, NA, NA),
PValue = c(NA, p_fert, NA, p_irr, p_irr_fer, NA, NA)
)
ano_table <- data.frame(
Source = c('Replicate', 'Fertilizer', 'Error(a)', 'Irrigation', 'FertilizerxIrrigation', 'Error(b)', 'Total'),
DF = c(df_rep, df_fertilizer, df_error_fer, df_irrigation, df_fer_irr, df_error, sum(c(df_rep, df_fertilizer, df_error_fer, df_irrigation, df_fer_irr, df_error))),  # Assuming df_error is the total error df
SS = c(ss_values["rep_ss"], ss_values["fert_ss"], ss_values["error_a_ss"], ss_values["irr_ss"], ss_values["fert_irr_ss"], ss_values["error_b_ss"], sum(ss_values[c("rep_ss", "fert_ss", "error_a_ss", "irr_ss", "fert_irr_ss", "error_b_ss")])),
MS = c(NA, ms_fertilizer, ms_error_fert, ms_irrigation, ms_irr_fer, NA),  # Assuming ms_error_fert is reused for error (a) and (b)
FStat = c(NA, f_fertilizer, NA, f_irrigation, f_irr_fer, NA, NA),
PValue = c(NA, p_fert, NA, p_irr, p_irr_fer, NA, NA)
)
lengths <- list(
length(c('Replicate', 'Fertilizer', 'Error (a)', 'Irrigation', 'Fertilizer x Irrigation', 'Error (b)', 'Total')),
length(c(df_rep, df_fertilizer, df_error_fer, df_irrigation, df_fer_irr, df_error, NA)),  # Adjust NA as necessary
length(c(ss_values["rep_ss"], ss_values["fert_ss"], ss_values["error_a_ss"], ss_values["irr_ss"], ss_values["fert_irr_ss"], ss_values["error_b_ss"], NA)),  # Adjust NA as necessary
length(c(NA, ms_fertilizer, ms_error_fert, ms_irrigation, ms_irr_fer, ms_error_fert, NA)),
length(c(NA, f_fertilizer, NA, f_irrigation, f_irr_fer, NA, NA)),
length(c(NA, p_fert, NA, p_irr, p_irr_fer, NA, NA))
)
lengths
ano_table <- data.frame(
Source = c('Replicate', 'Fertilizer', 'Error(a)', 'Irrigation', 'FertilizerxIrrigation', 'Error(b)', 'Total'),
DF = c(df_rep, df_fertilizer, df_error_fer, df_irrigation, df_fer_irr, df_error),  # Assuming df_error is the total error df
SS = c(ss_values["rep_ss"], ss_values["fert_ss"], ss_values["error_a_ss"], ss_values["irr_ss"], ss_values["fert_irr_ss"], ss_values["error_b_ss"], sum(ss_values[c("rep_ss", "fert_ss", "error_a_ss", "irr_ss", "fert_irr_ss", "error_b_ss")])),
MS = c(NA, ms_fertilizer, ms_error_fert, ms_irrigation, ms_irr_fer, NA),  # Assuming ms_error_fert is reused for error (a) and (b)
FStat = c(NA, f_fertilizer, NA, f_irrigation, f_irr_fer, NA, NA),
PValue = c(NA, p_fert, NA, p_irr, p_irr_fer, NA, NA)
)
ano_table <- data.frame(
Source = c('Replicate', 'Fertilizer', 'Error(a)', 'Irrigation', 'FertilizerxIrrigation', 'Error(b)', 'Total'),
DF = c(df_rep, df_fertilizer, df_error_fer, df_irrigation, df_fer_irr, df_error),  # Assuming df_error is the total error df
SS = c(ss_values["rep_ss"], ss_values["fert_ss"], ss_values["error_a_ss"], ss_values["irr_ss"], ss_values["fert_irr_ss"], ss_values["error_b_ss"]),
MS = c(NA, ms_fertilizer, ms_error_fert, ms_irrigation, ms_irr_fer, NA),  # Assuming ms_error_fert is reused for error (a) and (b)
FStat = c(NA, f_fertilizer, NA, f_irrigation, f_irr_fer, NA, NA),
PValue = c(NA, p_fert, NA, p_irr, p_irr_fer, NA, NA)
)
Source = c('Replicate', 'Fertilizer', 'Error(a)', 'Irrigation', 'FertilizerxIrrigation', 'Error(b)', 'Total')
DF = c(df_rep, df_fertilizer, df_error_fer, df_irrigation, df_fer_irr, df_error)
SS = c(ss_values["rep_ss"], ss_values["fert_ss"], ss_values["error_a_ss"], ss_values["irr_ss"], ss_values["fert_irr_ss"], ss_values["error_b_ss"])
MS = c(NA, ms_fertilizer, ms_error_fert, ms_irrigation, ms_irr_fer, NA)
FStat = c(NA, f_fertilizer, NA, f_irrigation, f_irr_fer, NA, NA)
PValue = c(NA, p_fert, NA, p_irr, p_irr_fer, NA, NA)
length(source)
length(Df)
length(DF)
df_rep = length(as.numeric(unique(agri_df$replicates))) -1
df_error = length(as.numeric(unique(agri_df$treatments))) - 1
df_rep = length(as.numeric(unique(agri_df$replicates))) -1
df_fertilizer = 1
df_irrigation = 2
df_fer_irr = df_fertilizer * df_irrigation
df_error = length(as.numeric(unique(agri_df$treatments))) - 1
df_error_fer = df_rep * df_fertilizer
df_error_irr = df_rep * df_fertilizer * df_irrigation
ms_fertilizer = ss_values["fert_ss"]/ df_fertilizer
ms_error_fert = ss_values["error_a_ss"]/ df_error_fer
ms_irrigation = ss_values["irr_ss"]/ df_irrigation
ms_irr_fer =  ss_values["fert_irr_ss"]/ df_fer_irr
ms_error_irr = ss_values["error_b_ss"]/ df_irrigation
f_fertilizer = ms_fertilizer/ms_error_fert
f_irrigation = ms_irrigation/ms_error_irr
f_irr_fer = ms_irr_fer/ms_error_irr
p_fert = pf(f_fertilizer, df_fertilizer, df_error_fer, lower.tail = FALSE)
p_irr = pf(f_irrigation, df_irrigation, df_error_irr, lower.tail = FALSE)
p_irr_fer = pf(f_irr_fer, df_fer_irr, df_error_irr, lower.tail = FALSE)
Source = c('Replicate', 'Fertilizer', 'Error(a)', 'Irrigation', 'FertilizerxIrrigation', 'Error(b)', 'Total')
DF = c(df_rep, df_fertilizer, df_error_fer, df_irrigation, df_fer_irr, df_error)
SS = c(ss_values["rep_ss"], ss_values["fert_ss"], ss_values["error_a_ss"], ss_values["irr_ss"], ss_values["fert_irr_ss"], ss_values["error_b_ss"])
MS = c(NA, ms_fertilizer, ms_error_fert, ms_irrigation, ms_irr_fer, NA)
FStat = c(NA, f_fertilizer, NA, f_irrigation, f_irr_fer, NA, NA)
PValue = c(NA, p_fert, NA, p_irr, p_irr_fer, NA, NA)
data.frame(
Source,DF, SS, MS, FStat, PValue
)
length(Source)
length(DF)
DF = c(df_rep, df_fertilizer, df_error_fer, df_irrigation, df_fer_irr, df_error_fer, df_error)
length(DF)
length(SS)
length(MS)
MS = c(NA, ms_fertilizer, ms_error_fert, ms_irrigation, ms_irr_fer, NA, NA)
data.frame(
Source,DF, SS, MS, FStat, PValue
)
length(SS)
length(MS)
SS = c(ss_values["rep_ss"], ss_values["fert_ss"], ss_values["error_a_ss"], ss_values["irr_ss"], ss_values["fert_irr_ss"], ss_values["error_b_ss"], ss_values["total_ss"])
length(SS)
data.frame(
Source,DF, SS, MS, FStat, PValue
)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# both events at the same time
treat_comb = combinat::combn(c("A1","A2", "B1", "B2", "C1", "C2"), 3)
treat_comb
check_combn = function(comb){
if ("A1" %in% comb && "A2" %in% comb)
return(FALSE)
if ("B1" %in% comb && "B2" %in% comb)
return(FALSE)
if ("C1" %in% comb && "C2" %in% comb)
return(FALSE)
return(T)
}
treat_comb = treat_comb[, apply(treat_comb, 2, check_combn)]
treat_comb
library(dplyr)
library(stringr)
full_design = data.frame(t(treat_comb))
colnames(full_design) = c("Temperature_A", "Humidity_B", "Light_Exposure_C")
full_design = full_design %>% mutate(
across(everything(), ~case_when(
endsWith(., "1")~ "low",
endsWith(., "2")~ "high",
TRUE ~ .
))
)
full_design
temperature_effect <- c("low(T)" = -30, "high(T)" = 60)
humidity_effect <- c("low(H)" = 18, "high(H)" = 90)
light_exposure_effect <- c("low(L)" = 254 , "high(L)" = 365)
set.seed(221)
response_2 = runif(64, min = 150, max = 300)
response = response_2
response
des_data = data.frame (
Temperature = rep(rep(c("low(T)", "high(T)"), each = 4), 8),
Humidity = rep(rep(c("low(H)", "high(H)"), times = 4), 8),
Light_exposure = rep(rep(c("low(L)", "high(L)"), times = 2, each = 2), 8),
Treatment = rep(as.factor(seq(1,8)), 8),
Replicates = as.factor(rep(seq(1, 8), each = 8)),
Response = response
)
des_data$Response = with(des_data, Response +
temperature_effect[Temperature] +
humidity_effect[Humidity] +
light_exposure_effect[Light_exposure])
des_data = des_data %>%
mutate(Temperature = as.factor(Temperature)) %>%
mutate(Humidity = as.factor(Humidity)) %>%
mutate(Light_exposure = as.factor(Light_exposure))
head(des_data)
table(des_data$Humidity, des_data$Light_exposure, des_data$Replicate)
anova_table = aov(Response~Temperature*Humidity*Light_exposure, data = des_data)
summary(anova_table)
library(agricolae)
temp_lsd = LSD.test(anova_table, c("Humidity", "Temperature", "Light_exposure"))$groups
temp_lsd
interaction.plot(
des_data$Humidity, des_data$Light_exposure, des_data$Response,
xlab = "Humidity", ylab = "Mean Response", trace.label = "Light Exposure",
col = c("red", "blue"), lwd = 2
)
interaction.plot(
des_data$Humidity, des_data$Temperature, des_data$Response,
xlab = "Humidity", ylab = "Mean Response", trace.label = "Temperature",
col = c("red", "blue"), lwd = 2
)
interaction.plot(
des_data$Temperature, des_data$Light_exposure, des_data$Response,
xlab = "Temperature", ylab = "Mean Response", trace.label = "Light Exposure",
col = c("red", "blue"), lwd = 2
)
data_1 = des_data[, c(1, 2, 3, 6)]
data_1$interactions = interaction(data_1$Humidity, data_1$Light_exposure, data_1$Temperature)
head(data_1)
fill_light = ggplot(data_1, aes(x=interactions, y=Response, fill=Light_exposure)) +
geom_boxplot() +
theme_minimal() +
labs(title="Boxplot of Response by Interactions", x="Light_exposure", y="Response")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
fill_temp = ggplot(data_1, aes(x=interactions, y=Response, fill=Temperature)) +
geom_boxplot() +
theme_minimal() +
labs(title="Boxplot of Response by Interactions", x="Temperature", y="Response")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
fill_humidity = ggplot(data_1, aes(x=interactions, y=Response, fill=Humidity)) +
geom_boxplot() +
theme_minimal() +
labs(title="Boxplot of Response by Interactions", x="Humidity", y="Response")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(gridExtra)
grid.arrange(fill_light, fill_temp, fill_humidity, nrow = 3, ncol = 1)
agri_data = data.frame(
fertilizer = rep(c("organic", "inorganic"), each = 3),
irrigation = rep(c("low", "medium", "high"), times = 2)
)
agri_data = as.matrix(agri_data)
agri_data
agri_df = data.frame(
fertilizer = as.factor(rep(c("organic", "inorganic"), each = 3 * 4 * 2)),
irrigation = as.factor(rep(c("low", "medium", "high"), times = 4 * 2)),
treatments = as.factor(rep(1:6, each = 4)),
replicates = as.factor(rep(1:4, times = 6))
)
agri_df
set.seed(225)
rand_no = rnorm(48, mean = 0, sd = 1)
# using the range of 55 - 159 from the ( United States Department of Agriculture (USDA), 2024)
agri_df$Yields = with(agri_df, 55 + (rand_no - min(rand_no)) * (159 - 55) / (max(rand_no) - min(rand_no)) +
as.numeric(fertilizer) * 5 + as.numeric(irrigation) * 3)
head(agri_df)
table(agri_df$fertilizer, agri_df$irrigation, agri_df$replicates)
library(nlme)
irrigation_model = lme(Yields ~ fertilizer* irrigation, random = ~ 1 | replicates,
data = agri_df)
irrigation_table = anova(irrigation_model)
irrigation_table
variance_components = VarCorr(irrigation_model)
variance_components
as.numeric(unique(agri_df$replicates)))
as.numeric(unique(agri_df$replicates))
as.numeric(unique(agri_df$treatments))
max(as.numeric(unique(agri_df$treatments)))
