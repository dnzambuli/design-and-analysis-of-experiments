conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = "Survival Curve for (Mental Illness Detected)")
ggplot(base_haz, aes(x = time, y = hazard))+
geom_line()+
labs(x = "Days",
y = "Hazard",
title = "Baseline Hazard Function")+
scale_x_continuous(breaks = breaks, limits = c(0, 900))
haz_fit_resident = coxph(Surv(time = duration, event = event_observed)~1, data = clean_resident)
base_haz_resident = basehaz(haz_fit_resident, centered = F)
summary(haz_fit_resident)
ggplot(base_haz_resident, aes(x = time, y = hazard))+
geom_line()+
labs(x = "Days",
y = "Hazard",
title = "Baseline Hazard Function for In-Patient")+
scale_x_continuous(breaks = breaks, limits = c(0, 900))
haz_fit_non_resident = coxph(Surv(time = duration, event = event_observed)~1, data = clean_non_resident)
base_haz_non_resident = basehaz(haz_fit_non_resident, centered = F)
summary(haz_fit_non_resident)
ggplot(base_haz_non_resident, aes(x = time, y = hazard))+
geom_line()+
labs(x = "Days",
y = "Hazard",
title = "Baseline Hazard Function for Out-Patient")+
scale_x_continuous(breaks = breaks, limits = c(0, 900))
library(survival)
p = ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve")
p$plot = p$plot + scale_x_continuous(breaks = breaks, limits = c(0, 900))
p
library(survival)
c = ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve")
c$plot = c$plot + scale_x_continuous(breaks = breaks, limits = c(0, 900))
c
breaks <- c(6, 18, 36, 54, seq(100, 820, by = 100))
library(survival)
c = ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve")
c$plot = c$plot + scale_x_continuous(breaks = breaks, limits = c(0, 900))
c
km_fit_resident = survfit(Surv(time = duration, event = event_observed)~1, data = clean_resident)
summary(km_fit_resident)
ggsurvplot(km_fit_resident, data = clean_resident,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
ggtheme = theme_bw(),
palette = c("#E7B800", "#2E9FDF"),
xlab = "Days",
ylab = "Survival Probability",
title = "Kaplan-Meier Survival Curve")
ggsurvplot(km_fit_resident, data = clean_resident,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
ggtheme = theme_bw(),
palette = c("#E7B800", "#2E9FDF"),
xlab = "Days",
ylab = "Survival Probability",
title = "Kaplan-Meier Survival Curve")+
scale_x_continuous(breaks = breaks, limits = c(0, 900))
ggsurvplot(km_fit_resident, data = clean_resident,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
ggtheme = theme_bw(),
palette = c("#E7B800", "#2E9FDF"),
xlab = "Days",
ylab = "Survival Probability",
title = "Kaplan-Meier Survival Curve")$plot +
scale_x_continuous(breaks = breaks, limits = c(0, 900))
breaks <- c(6, 18, 36, 54, seq(100, 820, by = 100))
library(survival)
c = ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve")$plot +
scale_x_continuous(breaks = breaks, limits = c(0, 900))
c
breaks <- c(6, 18, 36, 54, seq(100, 820, by = 100))
library(survival)
ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve")$plot +
scale_x_continuous(breaks = breaks, limits = c(0, 900))
breaks <- c(6, 18, 36, 54, seq(100, 820, by = 100))
library(survival)
ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve") +
scale_x_continuous(breaks = breaks, limits = c(0, 900))
breaks <- c(6, 18, 36, 54, seq(100, 820, by = 100))
library(survival)
ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve")$plot +
scale_x_continuous(breaks = breaks, limits = c(0, 900))
breaks <- c(6, 18, 36, 54, seq(100, 820, by = 100))
library(survival)
a = ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve")
a$plot = $plot +
breaks <- c(6, 18, 36, 54, seq(100, 820, by = 100))
library(survival)
a = ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve")
a$plot = a$plot + scale_x_continuous(breaks = breaks, limits = c(0, 900))
print(a)
breaks <- c(6, 18, 36, 54, seq(100, 820, by = 100))
library(survival)
a = ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve")
a$plot = a$plot + scale_x_continuous(breaks = breaks, limits = c(0, 900))
print(a$plot)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(agricolae)
q1_data = data.frame(Fields = rep(1:5, each = 5),
Acre = rep(1:5, times = 5),
Treatment = c('B', 'D', 'E', 'A', 'C',
'C', 'A', 'B', 'E', 'D',
'D', 'C', 'A', 'B', 'E',
'E', 'B', 'C', 'D', 'A',
'A', 'E', 'D', 'C', 'B'),
Yield = c(4.9, 6.4, 3.3, 9.5, 11.8,
9.3, 4.0, 6.2, 5.1, 5.4,
7.6, 15.4, 6.5, 6.0, 4.6,
6.3, 7.6, 13.2, 8.6, 4.9,
9.3, 6.3, 11.8, 15.9, 7.6))
q1_data
treatment_total = q1_data %>%
group_by(Treatment) %>%
summarize(Total_yield = sum(Yield))
treatment_total
total_yield = sum(treatment_total$Total_yield)
cat("The yields in bushels per acre from an experiment is", total_yield)
cor_fct_q1 = total_yield ^2 / nrow(q1_data)
cat("The correction factor is:\n\t\t", cor_fct_q1)
tot_ss_q1 = sum(q1_data$Yield^2) - cor_fct_q1
cat("The total sum of squares is:\n\t\t", tot_ss_q1)
Field_tot_q1 = q1_data %>%
group_by(Fields) %>%
summarize(Field_Yield = sum(Yield))
Field_tot_q1
Rss_q1 = (sum(Field_tot_q1$Field_Yield^2) / nrow(Field_tot_q1)) - cor_fct_q1
cat("The row sum of squares is:\n\t\t", Rss_q1)
Acre_tot_q1 = q1_data %>%
group_by(Acre) %>%
summarize(Acre_Yield = sum(Yield))
Acre_tot_q1
Css_q1 = (sum(Acre_tot_q1$Acre_Yield^2) / nrow(Acre_tot_q1)) - cor_fct_q1
cat("The column sum of squares is:\n\t\t", Css_q1)
Tss_q1 = sum(treatment_total$Total_yield^2)/ nrow(treatment_total) - cor_fct_q1
cat("The treatment sum of squares is:\n\t\t", Tss_q1)
error_ss_q1 = tot_ss_q1 - Rss_q1 - Css_q1 - Tss_q1
cat("The error sum of squares is:\n\t\t", error_ss_q1)
df_row = nrow(Field_tot_q1) - 1
df_col = nrow(Acre_tot_q1) - 1
df_treat = nrow(treatment_total) - 1
df_total = nrow(q1_data) -1
df_err = df_total - df_row - df_col - df_treat
ms_row = Rss_q1 / df_row
ms_col = Css_q1/ df_col
ms_treat = Tss_q1/ df_treat
ms_err = error_ss_q1/df_err
f_treat = ms_treat/ ms_err
cat("The f-statistic is:\n\t\t", f_treat)
p_treat = pf(f_treat, df_treat, df_total, lower.tail = F)
cat("The p-value for treatment is:\n\t\t",p_treat)
p_acre = pf(ms_col/ms_err, df_col, df_total, lower.tail = F)
cat("The p-value for Acre is:\n\t\t",p_acre)
p_field = pf(ms_row/ms_err, df_row, df_total, lower.tail = F)
cat("The p-value for Field is:\n\t\t",p_field)
q1_data$Treatment = as.factor(q1_data$Treatment)
q1_aov = aov(Yield~Fields + Acre + Treatment, data = q1_data)
summary(q1_aov)
lsd_q1 = LSD.test(aov(Yield~Treatment, data = q1_data), "Treatment", p.adj = "none")
lsd_q1$groups
library(ggplot2)
ggplot(q1_data, aes(x = Treatment, y = Yield, fill = Treatment))+
geom_boxplot()+
labs(
title = "Boxplot of Yield for each Treatment",
x = "Treatment",
y = "Spread"
)+
theme_minimal()+
scale_fill_brewer(palette = "Set3")
sd(c(7.96, 6.84, 6.46))
median( q1_data[q1_data$Treatment %in% c("A", "B","D"), "Yield"])
sd(c(6.84, 6.46, 5.12))
median( q1_data[q1_data$Treatment %in% c("A", "B","D"), "Yield"])
q2_data = data.frame(Steer = rep(1:6, each = 6),
Period = rep(1:6, times = 6),
Treatment = c('B', 'D', 'C', 'F', 'A', 'E',
'A', 'F', 'D', 'C', 'E', 'B',
'C', 'A', 'B', 'E', 'F', 'D',
'E', 'B', 'F', 'D', 'C', 'A',
'D', 'C', 'E', 'A', 'B', 'F',
'F', 'E', 'A', 'B', 'D', 'C'),
Digestion = c(61.1, 69.3, 67.6, 61.6, 58.8,65.2,
56.9, 59.1, 64.0, 61.0, 65.7, 56.6,
66.5, 62.2, 61.1, 66.2, 62.0, 62.2,
66.7, 67.4, 63.6, 53.2, 61.7, 62.0,
67.8, 64.7, 63.6, 53.2, 61.7, 62.0,
71.4, 67.5, 55.8, 63.2, 68.0, 62.9))
q2_data
q2_data$Treatment = as.factor(q2_data$Treatment)
str(q2_data)
q2_aov = aov(Digestion~Steer + Period + Treatment, data = q2_data)
summary(q2_aov)
lsd_q2 = LSD.test(aov(Digestion~Treatment, data = q2_data), "Treatment", p.adj = "none")
lsd_q2$groups
ggplot(q2_data, aes(x = Treatment, y = Digestion, fill = Treatment))+
geom_boxplot()+
labs(
title = "Boxplot of Digestion for each Ration",
x = "Ration",
y = "Spread"
)+
theme_minimal()+
scale_fill_brewer(palette = "Set3")
29.729/1.896
(29.729-1.896)/6
29.729/ 6.958
(29.729-1.896)/4
(6.958 - 1.896)/2
61.391-1.308
(61.391-1.308)/6
(61.391-1.308)/4
(1.308 - 0.712)/40
3*(0.8832)+6*(10.2513)
knitr::opts_chunk$set(echo = TRUE)
set.seed(223)
random_numbers = rnorm(6, mean = 0, sd = 1)
prod = rnorm(8, mean = 0, sd = 1)
response_1 = 150 + (prod - min(prod)) * (300 - 150) / (max(prod) - min(prod))
set.seed(221)
random_numbers_2 = rnorm(6, mean = 0, sd = 1)
prod_2 = rnorm(8, mean = 0, sd = 1)
response_2 = 150 + (prod_2 - min(prod_2)) * (300 - 150) / (max(prod_2) - min(prod_2))
set.seed(222)
random_numbers_3 = rnorm(6, mean = 0, sd = 1)
prod_3 = rnorm(8, mean = 0, sd = 1)
response_3 = 150 + (prod_3 - min(prod_3)) * (300 - 150) / (max(prod_3) - min(prod_3))
response = c(response_1, response_2, response_3)
response
des_data = data.frame (
Temperature = rep(rep(c("low", "high"), each = 4), 3),
Humidity = rep(rep(c("low", "high"), times = 4), 3),
Light_exposure = rep(rep(c("low", "high"), times = 2, each = 2), 3),
Replicate = rep(as.factor(c(1, 2, 3, 4)), 3),
Response = response
)
des_data = des_data %>%
mutate(as.factor(Temperature)) %>%
mutate(as.factor(Humidity)) %>%
mutate(as.factor(Light_exposure)) %>%
des_data
knitr::opts_chunk$set(echo = TRUE)
# both events at the same time
treat_comb = combinat::combn(c("A1","A2", "B1", "B2", "C1", "C2"), 3)
treat_comb
check_combn = function(comb){
if ("A1" %in% comb && "A2" %in% comb)
return(FALSE)
if ("B1" %in% comb && "B2" %in% comb)
return(FALSE)
if ("C1" %in% comb && "C2" %in% comb)
return(FALSE)
return(T)
}
treat_comb = treat_comb[, apply(treat_comb, 2, check_combn)]
treat_comb
library(dplyr)
library(stringr)
full_design = data.frame(t(treat_comb))
colnames(full_design) = c("Temperature_A", "Humidity_B", "Light_Exposure_C")
full_design = full_design %>% mutate(
across(everything(), ~case_when(
endsWith(., "1")~ "low",
endsWith(., "2")~ "high",
TRUE ~ .
))
)
full_design
set.seed(223)
random_numbers = rnorm(6, mean = 0, sd = 1)
prod = rnorm(8, mean = 0, sd = 1)
response_1 = 150 + (prod - min(prod)) * (300 - 150) / (max(prod) - min(prod))
set.seed(221)
random_numbers_2 = rnorm(6, mean = 0, sd = 1)
prod_2 = rnorm(8, mean = 0, sd = 1)
response_2 = 150 + (prod_2 - min(prod_2)) * (300 - 150) / (max(prod_2) - min(prod_2))
set.seed(222)
random_numbers_3 = rnorm(6, mean = 0, sd = 1)
prod_3 = rnorm(8, mean = 0, sd = 1)
response_3 = 150 + (prod_3 - min(prod_3)) * (300 - 150) / (max(prod_3) - min(prod_3))
response = c(response_1, response_2, response_3)
response
des_data = data.frame (
Temperature = rep(rep(c("low", "high"), each = 4), 3),
Humidity = rep(rep(c("low", "high"), times = 4), 3),
Light_exposure = rep(rep(c("low", "high"), times = 2, each = 2), 3),
Replicate = rep(as.factor(c(1, 2, 3, 4)), 3),
Response = response
)
des_data = des_data %>%
mutate(as.factor(Temperature)) %>%
mutate(as.factor(Humidity)) %>%
mutate(as.factor(Light_exposure)) %>%
des_data
des_data = data.frame (
Temperature = rep(rep(c("low", "high"), each = 4), 3),
Humidity = rep(rep(c("low", "high"), times = 4), 3),
Light_exposure = rep(rep(c("low", "high"), times = 2, each = 2), 3),
Replicate = rep(as.factor(c(1, 2, 3, 4)), 3),
Response = response
)
des_data = des_data %>%
mutate(Temperature = as.factor(Temperature)) %>%
mutateHumidity = (as.factor(Humidity)) %>%
mutate(Light_exposure = as.factor(Light_exposure)) %>%
des_data
View(des_data)
des_data = data.frame (
Temperature = rep(rep(c("low", "high"), each = 4), 3),
Humidity = rep(rep(c("low", "high"), times = 4), 3),
Light_exposure = rep(rep(c("low", "high"), times = 2, each = 2), 3),
Replicate = rep(as.factor(c(1, 2, 3, 4)), 3),
Response = response
)
des_data = des_data %>%
mutate(Temperature = as.factor(Temperature)) %>%
mutateHumidity = (as.factor(Humidity)) %>%
mutate(Light_exposure = as.factor(Light_exposure))
des_data = data.frame (
Temperature = rep(rep(c("low", "high"), each = 4), 3),
Humidity = rep(rep(c("low", "high"), times = 4), 3),
Light_exposure = rep(rep(c("low", "high"), times = 2, each = 2), 3),
Replicate = rep(as.factor(c(1, 2, 3, 4)), 3),
Response = response
)
des_data = des_data %>%
mutate(Temperature = as.factor(Temperature)) %>%
mutate(Humidity = as.factor(Humidity)) %>%
mutate(Light_exposure = as.factor(Light_exposure))
des_data
anova_table = aov(Response~Temperature*Humidity*Light_exposure, data = des_data)
summary(anova_table)
setwd("C:/Users/ADMIN/Documents/SEM 2 2024/STA4020 Design and Analysis of Experiments/Tasks and assignments/end trimester")
knitr::opts_chunk$set(echo = TRUE)
library(combinat)
treatment_comb = combn(c("Diet_Low", "Diet_Med", "Diet_High",
"Exercise_None", "Exercise_Daily",
"Supp_with", "Supp_WO"), 3)
check_combn = function(comb){
if ("Diet_Low" %in% comb && "Diet_Med" %in% comb)
return(F)
if ("Diet_Low" %in% comb && "Diet_High" %in% comb)
return(FALSE)
if ("Diet_Med" %in% comb && "Diet_High" %in% comb)
return(FALSE)
if ("Exercise_None" %in% comb && "Exercise_Daily" %in% comb)
return(FALSE)
if ("Supp_with" %in% comb && "Supp_WO" %in% comb)
return(FALSE)
return(T)
}
treatment_comb = treatment_comb[, apply(treatment_comb, 2, check_combn)]
treatment_comb
full_design = data.frame(t(treatment_comb))
# rename columns
colnames(full_design) = c("Diet", "Exercise", "Supplement")
# remove the preceeding labels
full_design$Diet = gsub("Diet_", "", full_design$Diet)
full_design$Exercise = gsub("Exercise_", "", full_design$Exercise)
full_design$Supplement = gsub("Supp_", "", full_design$Supplement)
full_design
reps = 12
replicates = as.factor(rep(seq(1, 12), each = reps)) #repeat the collection of data 6 times
treatments = as.factor(rep(seq(1, 12), reps))
print("replicates")
replicates
print("treatments")
treatments
diet_levels = factor(rep(rep(c("Low", "Med", "High"), each=4), reps))
exercise_levels = factor(rep(rep(c("None", "Daily"), each = 2, times=3), reps))
supplement_levels = factor(rep(rep(c("with", "WO"), each=1, times=6), reps))
set.seed(2222)
bp_val = 120 - rnorm(12 * reps, mean = mean(seq(4, 12)), sd = sd(seq(4, 12)))
bp_data = data.frame(
Diet = diet_levels,
Exercise = exercise_levels,
Supplement = supplement_levels,
Treatment = treatments,
Replicate = replicates,
BP = bp_val
)
head(bp_data)
confirm_data = function(colA, colB, colRep, data){
return(table(data[[colA]], data[[colB]], data[[colRep]]))
}
confirm_data("Diet","Exercise", "Replicate", bp_data)
confirm_data("Diet","Supplement", "Replicate", bp_data)
confirm_data("Supplement","Exercise", "Replicate", bp_data)
q1_anova =  aov(BP ~ Diet * Exercise * Supplement, data = bp_data)
summary(q1_anova)
q2_design = data.frame(soil = rep(c("Clay", "Sandy"), each = 3),
watering = rep(c("Low", "Medium", "High"), times = 2))
q2_design
plant_reps = 8
# the factors
soil_levels = as.factor(rep(c("Clay", "Sand"), each = 3, times = plant_reps))
water_levels = as.factor(rep(c("Low", "Medium", "High"), times = 2 * plant_reps))
treatments = as.factor(rep(seq(1, 6), times = plant_reps))
repetitions = as.factor(rep(seq(1, 8), each = 6))
plant_data = data.frame(
Soil = soil_levels,
Watering = water_levels,
Treatment = treatments,
Replicate = repetitions
)
plant_data
set.seed(223)
rand_q2 = rnorm(48, mean = 0, sd = 1)
plant_data$Wheat_height = with(plant_data,
95.25 + (rand_q2 - min(rand_q2)) * (100.25 - 95.25)/ (max(rand_q2) - min(rand_q2)) - as.numeric(Soil) * 10.16  + as.numeric(Watering) * 9.625) # the height increases between 9.25 cm and 10 cm based on watering (El-Shafei & Mattar, 2022)
# the height reduces by between 5.08 cm  and 15.24 cm (University of Minnesota, 2018)
head(plant_data)
confirm_data("Soil", "Watering", "Replicate", plant_data)
library(nlme)
q2_anova = lme(Wheat_height ~ Soil*Watering, random = ~ 1 | Replicate/Watering, data = plant_data)
q2_confirm = aov(Wheat_height ~ Soil*Watering + Watering/Replicate + Replicate, data=plant_data)
q2_table = anova(q2_anova)
summary(q2_confirm)
q2_table
View(plant_data)
plant_lsd = agricolae::LSD.test(plant_data, c("Soil", "Watering"))$groups
plant_lsd = agricolae::LSD.test(q2_confirm, c("Soil", "Watering"))$groups
plant_lsd
interaction.plot(
plant_data$Soil, plant_data$Watering, plant_data$Wheat_height,
xlab = "Soil", ylab = "Mean Response", trace.label = "Watering",
col = c("red", "blue"), lwd = 2
)
interaction.plot(
plant_data$Soil, plant_data$Watering, plant_data$Wheat_height,
xlab = "Soil", ylab = "Mean Response", trace.label = "Watering",
col = c("red", "blue", "green"), lwd = 2
)
interaction.plot(
plant_data$Soil, plant_data$Watering, plant_data$Wheat_height,
xlab = "Soil", ylab = "Mean Response", trace.label = "Watering",
col = c("red", "blue", "darkgreen"), lwd = 2
)
interaction.plot(
plant_data$Soil, plant_data$Watering, plant_data$Wheat_height,
xlab = "Soil", ylab = "Mean Wheat height", trace.label = "Watering",
col = c("red", "blue", "darkgreen"), lwd = 2
)
mean(c(105, 85))
mean(c(105, 95))
mean(c(100, 95))
90 -2.75
90 -2.5
107.5 - 87.5
117.5 -97.5
plant_lsd = agricolae::LSD.test(q2_confirm, c("Soil", "Watering"))$groups
plant_lsd
interaction.plot(
plant_data$Soil, plant_data$Watering, plant_data$Wheat_height,
xlab = "Soil", ylab = "Mean Wheat height", trace.label = "Watering",
col = c("red", "blue", "darkgreen"), lwd = 2
)
box_q2 = plant_data[, c(1, 2, 5)]
box_q2$interactions = interaction(box_q2$Soil, box_q2$Watering)
head(box_q2)
library(ggplot2)
ggplot(data_1, aes(x=interactions, y=Wheat_height)) +
geom_boxplot() +
theme_minimal() +
labs(title="Boxplot of Wheat height by Interactions", x="Interaction", y="Wheat height")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
ggplot(box_q2, aes(x=interactions, y=Wheat_height)) +
geom_boxplot() +
theme_minimal() +
labs(title="Boxplot of Wheat height by Interactions", x="Interaction", y="Wheat height")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
